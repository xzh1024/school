1.变量声明
    var
    let
    const


解构
2.解构数组
    let input = [1, 2];
    let [first, second] = input;
    console.log(first); // outputs 1
    console.log(second); // outputs 2


3.对象解构
    let o = {
        a: "foo",
        b: 12,
        c: "bar"
    };
    let { a, b } = o;

    注意，我们需要用括号将它括起来，因为Javascript通常会将以 { 起始的语句解析为一个块。

    你可以在对象里使用...语法创建剩余变量：

    let { a, ...passthrough } = o;
    let total = passthrough.b + passthrough.c.length;

    属性重命名
        let { a: newName1, b: newName2 } = o;

    默认值
        默认值可以让你在属性为 undefined 时使用缺省值：

        function keepWholeObject(wholeObject: { a: string, b?: number }) {
            let { a, b = 1001 } = wholeObject;
        }


4.函数声明
    解构也能用于函数声明。 看以下简单的情况：

    type C = { a: string, b?: number }
    function f({ a, b }: C): void {
        // ...
    }

5.展开
    展开操作符正与解构相反。 它允许你将一个数组展开为另一个数组，或将一个对象展开为另一个对象。 例如：

    let first = [1, 2];
    let second = [3, 4];
    let bothPlus = [0, ...first, ...second, 5];
    这会令bothPlus的值为[0, 1, 2, 3, 4, 5]。 展开操作创建了 first和second的一份浅拷贝。 它们不会被展开操作所改变。

    你还可以展开对象：
    对象的展开比数组的展开要复杂的多。 像数组展开一样，它是从左至右进行处理，但结果仍为对象。 这就意味着出现在展开对象后面的属性会覆盖前面的属性。 因此，如果我们修改上面的例子，在结尾处进行展开的话：

    let defaults = { food: "spicy", price: "$$", ambiance: "noisy" };
    let search = { food: "rich", ...defaults };

    那么，defaults里的food属性会重写food: "rich"，在这里这并不是我们想要的结果。

    对象展开还有其它一些意想不到的限制。 首先，它仅包含对象 自身的可枚举属性。 大体上是说当你展开一个对象实例时，你会丢失其方法：

    class C {
    p = 12;
    m() {
    }
    }
    let c = new C();
    let clone = { ...c };
    clone.p; // ok
    clone.m(); // error!